--- packages/events/lib/EventEmitter.ts
+++ packages/events/lib/EventEmitter.ts
@@ -76,9 +90,9 @@ export class EventEmitter<Events extends EventData> {
         listener: Listener<Events[EventName]>
     ): () => void;
     on<K extends BasicEvent>(event: string, listener: Listener<K>): () => void;
-    on(event: string, listener: Listener<BasicEvent>): () => void {
+    on(event: string, listener: Listener<any>): () => void {
         const listeners = this.getListeners(event);
-        listeners.add(listener);
+        listeners.push(listener);
 
         return this.off.bind(this, event, listener);
     }
@@ -88,7 +102,7 @@ export class EventEmitter<Events extends EventData> {
         listener: Listener<Events[EventName]>
     ): () => void;
     once<K extends BasicEvent>(event: string, listener: Listener<K>): () => void;
-    once(event: string, listener: Listener<BasicEvent>): () => void {
+    once(event: string, listener: Listener<any>): () => void {
         const removeListener = this.on(event, async (ev) => {
             removeListener();
             await listener(ev);
@@ -111,7 +125,7 @@ export class EventEmitter<Events extends EventData> {
         filter: (ev: Events[EventName]) => boolean|Promise<boolean>
     ): Promise<Events[EventName]>;
     waitf<K extends BasicEvent>(event: string, filter: (ev: K) => boolean|Promise<boolean>): Promise<BasicEvent>;
-    waitf(event: string, filter: (ev: BasicEvent) => boolean|Promise<boolean>): Promise<BasicEvent> {
+    waitf(event: string, filter: (ev: any) => boolean|Promise<boolean>): Promise<BasicEvent> {
         return new Promise(resolve => {
             const off = this.on(event, async ev => {
                 if (await filter(ev)) {
@@ -127,14 +141,17 @@ export class EventEmitter<Events extends EventData> {
         listener: Listener<Events[EventName]>
     ): void;
     off<K extends BasicEvent>(event: string, listener: Listener<K>): void;
-    off(event: string, listener: Listener<BasicEvent>) {
+    off(event: string, listener: Listener<any>) {
         const listeners = this.getListeners(event);
-        listeners.delete(listener);
+        const idx = listeners.indexOf(listener);
+        if (idx > -1) {
+            listeners.splice(idx, 1);
+        }
     }
 
-    getListeners<Event extends BasicEvent = BasicEvent>(event: string): Set<Listener<Event>> {
+    getListeners<Event extends BasicEvent = BasicEvent>(event: string): Listener<Event>[] {
         const cachedListeners = this.listeners.get(event);
-        const listeners = cachedListeners || new Set;
+        const listeners = cachedListeners || [];
         if (!cachedListeners) {
             this.listeners.set(event, listeners);
         }
